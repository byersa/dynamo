/*
 * This Work is in the public domain and is provided on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,
 * including, without limitation, any warranties or conditions of TITLE,
 * NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE.
 * You are solely responsible for determining the appropriateness of using
 * this Work and assume any risks associated with your use of this Work.
 *
 * This Work includes contributions authored by David E. Jones, not as a
 * "work for hire", who hereby disclaims any copyright to the same.
 */

tasks.withType(Compile) {
    options.compilerArgs << "-Xlint:unchecked"
}

apply plugin: 'groovy'

sourceCompatibility = '1.6'
def moquiDir = file(projectDir.absolutePath + '/../../..')
def frameworkDir = file(moquiDir.absolutePath + '/framework')
archivesBaseName = 'dynamo'
//sourceSets.main.output.classesDir = file(projectDir.absolutePath + '/classes' )

        logger.lifecycle("moquiDir: ${moquiDir}")
// maybe in the future: repositories { mavenCentral() }
repositories {
    flatDir name: 'locallib', dirs: projectDir.absolutePath + '/lib'
    flatDir name: 'frameworklib', dirs: frameworkDir.absolutePath + '/lib'
    flatDir name: 'camellib', dirs: frameworkDir.absolutePath + '/lib/camel'
    flatDir name: 'searchlib', dirs: frameworkDir.absolutePath + '/lib/search'
    flatDir name: 'moquiLib', dirs: frameworkDir.absolutePath + '/build/libs'
}

dependencies {
    compile fileTree(dir: frameworkDir.absolutePath + '/lib', includes: ['*.jar'])
    compile fileTree(dir: frameworkDir.absolutePath + '/lib/camel', includes: ['*.jar'])
    compile fileTree(dir: frameworkDir.absolutePath + '/lib/search', includes: ['*.jar'])
    compile fileTree(dir: frameworkDir.absolutePath + '/lib/fop', includes: ['*.jar'])
    compile fileTree(dir: frameworkDir.absolutePath + '/lib/kie', includes: ['*.jar'])
    compile fileTree(dir: frameworkDir.absolutePath + '/lib/orientdb', includes: ['*.jar'])
    compile name: 'moqui-framework', version: '1.5.0' // Public Domain
    compile name: 'aws-java-sdk', version: '1.9.22' // Apache 2.0
    compile name: 'joda-time', version: '2.4' // Apache 2.0
    //compile name: 'jackson-all', version: '1.9.11' // Apache 2.0
}

// by default the Java plugin runs test on build, change to not do that (only run test if explicit task)
check.dependsOn.remove('test')
build.dependsOn.remove('test')

test {
    systemProperty 'moqui.runtime', '../..'
    systemProperty 'moqui.conf', 'conf/MoquiDevConf.xml'
    systemProperty 'moqui.init.static', 'true'
    //systemProperty 'dynamodb.accessKey', 'AKIAIBRXVHUM37OTC4MQ'
    //systemProperty 'dynamodb.secretAccessKey', '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'

    testLogging.showStandardStreams = true

    classpath += files(sourceSets.main.output.classesDir)
    classpath += files(projectDir.absolutePath)
    //classpath += fileTree(dir: projectDir.absolutePath,
    //        includes: ['data/**', 'entity/**', 'screen/**', 'service/**', 'template/**', 'xsd/**'])

    beforeTest { descriptor ->
        logger.lifecycle("Running test: ${descriptor}")
    }
}

jar {
    // this is necessary otherwise jar won't build when war plugin is applied
    destinationDir = file(projectDir.absolutePath + '/lib' )
    enabled = true
    appendix = 'dynamodb'
    manifest { attributes 'Implementation-Title': 'DynamoDB Entity', 'Implementation-Version': '1.0.0' }
    from sourceSets.main.output
}

